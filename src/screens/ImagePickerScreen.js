import React, { useState, useEffect } from "react";
import {
  TextInput,
  Text,
  Image,
  StyleSheet,
  View,
  ScrollView,
  Alert,
  Button,
} from "react-native";
import { Ionicons } from "@expo/vector-icons"; // –î–æ–¥–∞–ª–∏ —ñ–º–ø–æ—Ä—Ç
import { colors } from "../../colors";
import * as ImagePicker from "expo-image-picker";
import AsyncStorage from "@react-native-async-storage/async-storage";
import OutlineButton from "../../component/UI/OutlineButton";

export default function ImagePickerScreen({ navigation }) {
  const [image, setImage] = useState(null);
  const [title, setTitle] = useState("");
  const [savedNotes, setSavedNotes] = useState([]);
  const [hasPermission, setHasPermission] = useState(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
  useEffect(() => {
    async function loadNotes() {
      const storedNotes = await AsyncStorage.getItem("notes");
      if (storedNotes) {
        setSavedNotes(JSON.parse(storedNotes));
      }
    }
    loadNotes();
  }, []);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
  useEffect(() => {
    async function checkPermissions() {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      setHasPermission(status === "granted");
    }
    checkPermissions();
  }, []);

  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó
  async function takeImageHandler() {
    if (!hasPermission) {
      Alert.alert(
        "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
        "–ù–∞–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–º–µ—Ä–∏ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö."
      );
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled && result.assets?.length > 0) {
      setImage(result.assets[0].uri);
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
  async function saveNoteHandler() {
    if (!title.trim() && !image) {
      Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–î–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!");
      return;
    }

    const newNote = { title, image };
    const updatedNotes = [newNote, ...savedNotes];

    setSavedNotes(updatedNotes);
    await AsyncStorage.setItem("notes", JSON.stringify(updatedNotes));

    // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É
    setTitle("");
    setImage(null);
  }

  return (
    <View style={styles.container}>
      <ScrollView>
        <TextInput
          style={styles.input}
          placeholder="Title"
          value={title}
          onChangeText={setTitle}
        />
        <OutlineButton icon={"camera"} onPress={takeImageHandler}>
          –ó—Ä–æ–±–∏—Ç–∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é
        </OutlineButton>

        {image && <Image source={{ uri: image }} style={styles.preview} />}
        <OutlineButton icon={"document-text-outline"} onPress={saveNoteHandler}>
          –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∞—à—É –Ω–æ—Ç–∞—Ç–∫—É
        </OutlineButton>
        {/* <Button title="" onPress={saveNoteHandler} /> */}

        <Text style={styles.sectionTitle}>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏:</Text>
        {savedNotes.map((note, index) => (
          <View key={index} style={styles.noteItem}>
            <Ionicons
              name="document-text-outline"
              size={24}
              color={colors.primary50}
              style={styles.noteIcon}
            />
            {note.image && (
              <Image source={{ uri: note.image }} style={styles.noteImage} />
            )}
            <Text style={styles.noteText}>{note.title}</Text>
          </View>
        ))}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#E3F2FD",
  },
  input: {
    borderBottomWidth: 1,
    padding: 8,
    marginBottom: 10,
    fontSize: 16,
    borderColor: colors.primary15,
  },
  preview: {
    width: 200,
    height: 200,
    alignSelf: "center",
    marginTop: 10,
    borderRadius: 10,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginTop: 20,
  },
  noteItem: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#fff",
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 1 },
  },
  noteIcon: {
    marginRight: 10,
  },
  noteImage: {
    width: 50,
    height: 50,
    marginRight: 10,
    borderRadius: 5,
  },
  noteText: {
    fontSize: 16,
  },
});

//       <Button title="üì∏ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ" onPress={takeImageHandler} />
//
